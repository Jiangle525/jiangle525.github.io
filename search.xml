<?xml version="1.0" encoding="utf-8"?>
<search> 
  
  
    
    <entry>
      <title>白嫖系列——WebStorm</title>
      <link href="/2020/05/16/%E7%99%BD%E5%AB%96%E7%B3%BB%E5%88%97%E2%80%94%E2%80%94WebStorm/"/>
      <url>/2020/05/16/%E7%99%BD%E5%AB%96%E7%B3%BB%E5%88%97%E2%80%94%E2%80%94WebStorm/</url>
      
        <content type="html"><![CDATA[<blockquote><p>仅供学习交流使用，请支持正版，谢谢合作（白嫖，它不香么？）</p></blockquote><h1 id="1-下载软件"><a href="#1-下载软件" class="headerlink" title="1. 下载软件"></a>1. 下载软件</h1><p>官方下载地址：<a href="https://www.jetbrains.com/webstorm/download/" target="_blank" rel="noopener">https://www.jetbrains.com/webstorm/download/</a></p><p>百度网盘下载链接：<a href="https://pan.baidu.com/s/19h9uKAeJJJ08-n4K-5misg" target="_blank" rel="noopener">https://pan.baidu.com/s/19h9uKAeJJJ08-n4K-5misg</a><br>提取码：<code>4x6n</code></p><h1 id="2-下载白嫖包"><a href="#2-下载白嫖包" class="headerlink" title="2. 下载白嫖包"></a>2. 下载白嫖包</h1><p>百度网盘下载链接：<a href="https://pan.baidu.com/s/1iLCAYK1-k0js8Mjc3Lb2RA" target="_blank" rel="noopener">https://pan.baidu.com/s/1iLCAYK1-k0js8Mjc3Lb2RA</a><br>提取码：<code>mmx9</code></p><h1 id="3-引入包"><a href="#3-引入包" class="headerlink" title="3. 引入包"></a>3. 引入包</h1><ol><li>鼠标右键点击WebStorm的图标，点击<code>打开文件所在位置</code>，将这三个文件复制到安装目录下。</li></ol><p><img src="https://img-blog.csdnimg.cn/20200516161539883.png#pic_center" alt="破解文件"></p><ol><li><p>鼠标右键点击<code>地址栏</code>，点击<code>复制地址</code>，我这里的地址为：</p><pre><code class="bash">D:\Program Files\JetBrains\WebStorm 2018.2.3\bin</code></pre></li><li><p>用记事本打开<code>webstorm.exe.vmoptions</code>文件，把最后一行改成：</p><pre><code class="bash">-javaagent:刚刚复制的地址\JetbrainsCrack.jar</code></pre></li><li><p>以同样的方式修改<code>webstorm64.exe.vmoptions</code> 文件。</p></li></ol><h1 id="4-输入激活码"><a href="#4-输入激活码" class="headerlink" title="4. 输入激活码"></a>4. 输入激活码</h1><ol><li>打开我分享的<code>激活码.txt</code>，<code>Ctrl+A</code>全选，<code>Ctrl+C</code>复制</li></ol><p><img src="https://img-blog.csdnimg.cn/20200516161618993.png#pic_center" alt="激活码"></p><ol start="2"><li>打开WebStorm，输入激活码。激活完成！</li></ol>]]></content>
      
      
      <categories>
          
          <category> 白嫖系列 </category>
          
      </categories>
      
      
        <tags>
            
            <tag> 工具 </tag>
            
            <tag> 白嫖 </tag>
            
        </tags>
      
    </entry>
    
    
    
    <entry>
      <title>Typora基础教程——快捷键篇</title>
      <link href="/2020/05/16/Typora%E5%9F%BA%E7%A1%80%E6%95%99%E7%A8%8B%E2%80%94%E2%80%94%E5%BF%AB%E6%8D%B7%E9%94%AE%E7%AF%87/"/>
      <url>/2020/05/16/Typora%E5%9F%BA%E7%A1%80%E6%95%99%E7%A8%8B%E2%80%94%E2%80%94%E5%BF%AB%E6%8D%B7%E9%94%AE%E7%AF%87/</url>
      
        <content type="html"><![CDATA[<h1 id="Typora常用快捷键"><a href="#Typora常用快捷键" class="headerlink" title="Typora常用快捷键"></a>Typora常用快捷键</h1><h2 id="视图操作快捷"><a href="#视图操作快捷" class="headerlink" title="视图操作快捷"></a>视图操作快捷</h2><table><thead><tr><th align="center">功能</th><th align="center">快捷键</th></tr></thead><tbody><tr><td align="center">大纲视图</td><td align="center">Ctrl+Shift+1</td></tr><tr><td align="center">文件列表视图</td><td align="center">Ctrl+Shift+2</td></tr><tr><td align="center">放大视图</td><td align="center">Ctrl+Shift+‘+’</td></tr><tr><td align="center">缩小视图</td><td align="center">Ctrl+Shift+‘-’</td></tr><tr><td align="center">源代码模式</td><td align="center">Ctrl+/</td></tr><tr><td align="center">专注模式(当前编辑行为黑，其他行为灰色)</td><td align="center">F8</td></tr><tr><td align="center">打字机模式(光标始终在屏幕中央位置)</td><td align="center">F9</td></tr></tbody></table><h2 id="标题段落快捷键"><a href="#标题段落快捷键" class="headerlink" title="标题段落快捷键"></a>标题段落快捷键</h2><p><code>MarkDown</code>支持6级标题，可以使用<code>Ctrl+数字</code> 指定不同层次的标题和段落</p><table><thead><tr><th align="center">功能</th><th align="center">快捷键</th></tr></thead><tbody><tr><td align="center">正文</td><td align="center">Ctrl + 0</td></tr><tr><td align="center">1级标题</td><td align="center">Ctrl + 1</td></tr><tr><td align="center">2级标题</td><td align="center">Ctrl + 2</td></tr><tr><td align="center">k级标题</td><td align="center">Ctrl + k</td></tr><tr><td align="center">6级标题</td><td align="center">Ctrl + 6</td></tr><tr><td align="center">提升标题级别</td><td align="center">Ctrl + ‘+’</td></tr><tr><td align="center">降低标题级别</td><td align="center">Ctrl + ‘-</td></tr></tbody></table><h2 id="字体操作快捷键"><a href="#字体操作快捷键" class="headerlink" title="字体操作快捷键"></a>字体操作快捷键</h2><table><thead><tr><th align="center">功能</th><th align="center">快捷键</th></tr></thead><tbody><tr><td align="center">字体加粗</td><td align="center">Ctrl + B</td></tr><tr><td align="center">下划线</td><td align="center">Ctrl + U</td></tr><tr><td align="center">倾斜</td><td align="center">Ctrl + I</td></tr><tr><td align="center">删除线</td><td align="center">Alt + Shift + 5</td></tr></tbody></table><h2 id="插入功能快捷键"><a href="#插入功能快捷键" class="headerlink" title="插入功能快捷键"></a>插入功能快捷键</h2><table><thead><tr><th align="center">功能</th><th align="center">快捷键</th></tr></thead><tbody><tr><td align="center">插入图片</td><td align="center">Ctrl+Shift+I</td></tr><tr><td align="center">插入表格</td><td align="center">Ctrl+T</td></tr><tr><td align="center">插入有序列表</td><td align="center">Ctrl+Shift+[</td></tr><tr><td align="center">插入无序列表</td><td align="center">Ctrl+Shift+]</td></tr><tr><td align="center">插入超链接</td><td align="center">Ctrl+K</td></tr><tr><td align="center">插入代码片</td><td align="center">Ctrl+Shift+`</td></tr><tr><td align="center">插入代码块</td><td align="center">Ctrl+Shift+K</td></tr><tr><td align="center">插入公式块</td><td align="center">Ctrl+Shift+M</td></tr><tr><td align="center">插入引用块</td><td align="center">Ctrl+Shift+Q</td></tr></tbody></table><h2 id="表格扩展快捷键"><a href="#表格扩展快捷键" class="headerlink" title="表格扩展快捷键"></a>表格扩展快捷键</h2><table><thead><tr><th align="center">功能</th><th align="center">快捷键</th></tr></thead><tbody><tr><td align="center">下方插入行</td><td align="center">Ctrl+Enter（回车）</td></tr><tr><td align="center">删除该行</td><td align="center">Shift+Ctrl+BackSpace（退格）</td></tr><tr><td align="center">上移该行</td><td align="center">Shift+Ctrl+↑</td></tr><tr><td align="center">下移该行</td><td align="center">Shift+Ctrl+↓</td></tr><tr><td align="center">左移该列</td><td align="center">Shift+Ctrl+←</td></tr><tr><td align="center">右移该列</td><td align="center">Shift+Ctrl+→</td></tr></tbody></table><h2 id="跳转操作"><a href="#跳转操作" class="headerlink" title="跳转操作"></a>跳转操作</h2><table><thead><tr><th align="center">功能</th><th align="center">快捷键</th></tr></thead><tbody><tr><td align="center">跳转到文首</td><td align="center">Ctrl+Home<br />Ctrl+Fn+←</td></tr><tr><td align="center">跳转到所选内容</td><td align="center">Ctrl+J</td></tr><tr><td align="center">跳转到文末</td><td align="center">Ctrl+End<br />Ctrl+Fn+→</td></tr></tbody></table>]]></content>
      
      
      <categories>
          
          <category> Typora </category>
          
      </categories>
      
      
        <tags>
            
            <tag> 工具 </tag>
            
            <tag> Typora </tag>
            
        </tags>
      
    </entry>
    
    
    
    <entry>
      <title>CentOS 7 添加一个简单的系统调用（内核模块法）</title>
      <link href="/2020/04/23/CentOS7%E6%B7%BB%E5%8A%A0%E7%AE%80%E5%8D%95%E7%9A%84%E7%B3%BB%E7%BB%9F%E8%B0%83%E7%94%A8%E7%94%A8-%E6%A8%A1%E5%9D%97%E6%B3%95/"/>
      <url>/2020/04/23/CentOS7%E6%B7%BB%E5%8A%A0%E7%AE%80%E5%8D%95%E7%9A%84%E7%B3%BB%E7%BB%9F%E8%B0%83%E7%94%A8%E7%94%A8-%E6%A8%A1%E5%9D%97%E6%B3%95/</url>
      
        <content type="html"><![CDATA[<hr><h1 id="一、实验目的"><a href="#一、实验目的" class="headerlink" title="一、实验目的"></a>一、实验目的</h1><ol><li>学习Linux的内核的系统调用。</li><li>理解、掌握Linux系统调用的实现框架、用户界面、参数传递、进入/返回过程。</li></ol><hr><h1 id="二、实验内容"><a href="#二、实验内容" class="headerlink" title="二、实验内容"></a>二、实验内容</h1><p>在系统调用中添加一个不用传递参数的系统调用，实现一个简单的系统调用的添加。执行这个系统调用，在屏幕上显示输出“Hello World! ”。</p><hr><h1 id="三、实验环境"><a href="#三、实验环境" class="headerlink" title="三、实验环境"></a>三、实验环境</h1><p>虚拟机软件：Vmware Workstation<br>Linux发行版：CentOS 7  内置内核：linux 3.10.0<br>待编译内核：linux 4.15.10</p><hr><h1 id="四、操作方法和步骤"><a href="#四、操作方法和步骤" class="headerlink" title="四、操作方法和步骤"></a>四、操作方法和步骤</h1><h2 id="（1）准备工作"><a href="#（1）准备工作" class="headerlink" title="（1）准备工作"></a>（1）准备工作</h2><ol><li>查询syscall_table的地址，执行命令：<pre><code class="bash">sudo cat /proc/kallsyms | grep sys_call_table</code></pre><img src="https://img-blog.csdnimg.cn/20200423230707376.png#pic_center" alt="查询syscall_table地址"></li><li>查询可用的系统调用号，使用vim编辑器打开unistd_32.h，执行命令：<pre><code class="bash">vim /usr/include/asm/unistd_32.h</code></pre>在普通模式下，输入<code>G</code>或者<code>shift+g</code>定位到文尾，可以看到最后一个是383，因此384是可用的系统调用号<br><img src="https://img-blog.csdnimg.cn/20200423231432629.png?x-oss-process=image/watermark,type_ZmFuZ3poZW5naGVpdGk,shadow_10,text_aHR0cHM6Ly9ibG9nLmNzZG4ubmV0L3FxXzQ1MTE2MDA5,size_16,color_FFFFFF,t_70#pic_center" alt="查询可用的系统调用号"></li></ol><h2 id="（2）创建hello-c文件"><a href="#（2）创建hello-c文件" class="headerlink" title="（2）创建hello.c文件"></a>（2）创建hello.c文件</h2><ul><li>sys_call_table为上面查询到的系统调用表的地址，NUM为待添加的系统调用号</li><li>使用<code>vim</code>命令创建<code>hello.c</code>，并添加以下内容：<pre><code class="bash">#include &lt;linux/kernel.h&gt;#include &lt;linux/init.h&gt;#include &lt;linux/module.h&gt;#include &lt;linux/unistd.h&gt;#include &lt;linux/sched.h&gt;MODULE_LICENSE(&quot;Dual BSD/GPL&quot;);#define SYS_CALL_TABLE_ADDRESS 0xffffffffa8400160  //sys_call_table对应的地址#define NUM 384  //系统调用号为384int orig_cr0;  //用来存储cr0寄存器原来的值unsigned long *sys_call_table_my=0;static int(*anything_saved)(void);  //定义一个函数指针，用来保存一个系统调用static int clear_cr0(void) //使cr0寄存器的第17位设置为0（内核空间可写）{  unsigned int cr0=0;  unsigned int ret;  asm volatile(&quot;movq %%cr0,%%rax&quot;:&quot;=a&quot;(cr0));//将cr0寄存器的值移动到eax寄存器中，同时输出到cr0变量中  ret=cr0;  cr0&amp;=0xfffffffffffeffff;//将cr0变量值中的第17位清0,将修改后的值写入cr0寄存器  asm volatile(&quot;movq %%rax,%%cr0&quot;::&quot;a&quot;(cr0));//将cr0变量的值作为输入，输入到寄存器eax中，同时移动到寄存器cr0中  return ret;}static void setback_cr0(int val) //使cr0寄存器设置为内核不可写{  asm volatile(&quot;movq %%rax,%%cr0&quot;::&quot;a&quot;(val));}asmlinkage long sys_mycall(void) //定义自己的系统调用{     printk(&quot;模块系统调用-当前pid：%d，当前comm:%s\n&quot;,current-&gt;pid,current-&gt;comm);  printk(&quot;hello,world!\n&quot;);  return current-&gt;pid;    }static int __init call_init(void){  sys_call_table_my=(unsigned long*)(SYS_CALL_TABLE_ADDRESS);  printk(&quot;call_init......\n&quot;);  anything_saved=(int(*)(void))(sys_call_table_my[NUM]);//保存系统调用表中的NUM位置上的系统调用  orig_cr0=clear_cr0();//使内核地址空间可写  sys_call_table_my[NUM]=(unsigned long) &amp;sys_mycall;//用自己的系统调用替换NUM位置上的系统调用  setback_cr0(orig_cr0);//使内核地址空间不可写  return 0;}static void __exit call_exit(void){  printk(&quot;call_exit......\n&quot;);  orig_cr0=clear_cr0();  sys_call_table_my[NUM]=(unsigned long)anything_saved;//将系统调用恢复  setback_cr0(orig_cr0);}module_init(call_init);module_exit(call_exit);</code></pre></li></ul><h2 id="（3）创建Makefile文件"><a href="#（3）创建Makefile文件" class="headerlink" title="（3）创建Makefile文件"></a>（3）创建Makefile文件</h2><ul><li>使用<code>vim</code>命令创建Makefile文件，添加以下内容<pre><code class="bash">obj-m:=hello.oCURRENT_PATH:=$(shell pwd)LINUX_KERNEL_PATH:=/usr/src/linux-4.15.10all:  make -C  $(LINUX_KERNEL_PATH) M=$(CURRENT_PATH) modulesclean:  make -C  $(LINUX_KERNEL_PATH) M=$(CURRENT_PATH) clean</code></pre></li><li><strong>注意：</strong><code>LINUX_KERNEL_PATH</code>是内核代码的位置</li></ul><h2 id="（4）安装内核模块"><a href="#（4）安装内核模块" class="headerlink" title="（4）安装内核模块"></a>（4）安装内核模块</h2><ol><li>执行命令:<pre><code class="c">make</code></pre></li><li>查看make是否成功，执行命令：<pre><code class="bash">ls | grep &#39;hello.*&#39;</code></pre>看到有<code>ko</code>，<code>mod.c</code>，<code>mod.o</code>文件就说明成功了</li><li>使用insmod插入模块，执行命令：<pre><code class="bash">insmod hello.ko</code></pre></li><li>使用lsmod查看模块是否插入成功，执行命令：<pre><code class="bash">lsmod</code></pre><code>Module</code>出现hello，表示模块插入成功</li></ol><h2 id="（5）测试系统调用"><a href="#（5）测试系统调用" class="headerlink" title="（5）测试系统调用"></a>（5）测试系统调用</h2><ol><li>使用vim创建test.c文件，执行命令：<pre><code class="c">#include&lt;stdio.h&gt;#include&lt;stdlib.h&gt;#include&lt;linux/kernel.h&gt;#include&lt;sys/syscall.h&gt;#include&lt;unistd.h&gt;int main(){     unsigned long x = 0;     x = syscall(483);        //测试483号系统调用     printf(&quot;17计科-1727405169 syscall result: %ld\n&quot;, x);     return 0;}</code></pre></li><li>使用gcc编译，执行命令：<pre><code class="c">gcc test.c</code></pre></li><li>运行a.out，执行命令：<pre><code class="c">./a.out</code></pre>出现以下结果就成功了。<br><img src="https://img-blog.csdnimg.cn/20200423232810313.png#pic_center" alt="成功运行"></li></ol><hr><h1 id="五、总结"><a href="#五、总结" class="headerlink" title="五、总结"></a>五、总结</h1><ul><li>两个字高度概括，<strong>简单！</strong></li><li>剩下的你们自己慢慢写吧，有问题欢迎在留言区交流，谢谢观看。</li></ul>]]></content>
      
      
      <categories>
          
          <category> Linux </category>
          
      </categories>
      
      
        <tags>
            
            <tag> Linux </tag>
            
            <tag> CentOS </tag>
            
        </tags>
      
    </entry>
    
    
    
    <entry>
      <title>GithubPages入门教程</title>
      <link href="/2020/04/15/GithubPages%E5%85%A5%E9%97%A8%E6%95%99%E7%A8%8B/"/>
      <url>/2020/04/15/GithubPages%E5%85%A5%E9%97%A8%E6%95%99%E7%A8%8B/</url>
      
        <content type="html"><![CDATA[<hr><h2 id="一、什么是-GitHub-Pages"><a href="#一、什么是-GitHub-Pages" class="headerlink" title="一、什么是 GitHub Pages"></a>一、什么是 GitHub Pages</h2><p>官方给出的说明：您和您的项目的网站，直接从您的GitHub存储库托管。只需编辑，推送，您的更改就会生效。</p><hr><h2 id="二、为什么使用Github-Pages"><a href="#二、为什么使用Github-Pages" class="headerlink" title="二、为什么使用Github Pages"></a>二、为什么使用Github Pages</h2><ul><li>搭建简单而且免费</li><li>支持静态脚本</li><li>可以绑定你的域名</li><li>DIY自由发挥，动手实践一些有意思的东西</li><li>写博环境，git+github+markdown+hexo</li></ul><hr><h2 id="三、创建Github-Pages"><a href="#三、创建Github-Pages" class="headerlink" title="三、创建Github Pages"></a>三、创建Github Pages</h2><h3 id="1-创建一个GitHub账号"><a href="#1-创建一个GitHub账号" class="headerlink" title="1. 创建一个GitHub账号"></a>1. 创建一个GitHub账号</h3><ul><li><a href="https://github.com/">github官网</a></li><li>取一个适合的名字，后面会通过username .github.io访问你的主页，username是你的用户名<h3 id="2-创建一个仓库-New-repository"><a href="#2-创建一个仓库-New-repository" class="headerlink" title="2. 创建一个仓库(New repository)"></a>2. 创建一个仓库(New repository)</h3></li><li>右上角点击加号“+”，创建一个仓库<br><img src="https://img-blog.csdnimg.cn/20200414165421417.png#pic_center" alt="创建仓库1"></li><li>名字为username .github.io，username是你的用户名，如果不是你的用户名，它将不起作用，也就不能通过username .github.io访问你的主页<br><img src="https://img-blog.csdnimg.cn/20200414165938252.png?x-oss-process=image/watermark,type_ZmFuZ3poZW5naGVpdGk,shadow_10,text_aHR0cHM6Ly9ibG9nLmNzZG4ubmV0L3FxXzQ1MTE2MDA5,size_16,color_FFFFFF,t_70#pic_center" alt="创建仓库2"><h3 id="3-创建一个主页文件index-html"><a href="#3-创建一个主页文件index-html" class="headerlink" title="3.创建一个主页文件index.html"></a>3.创建一个主页文件index.html</h3></li><li>点击<code>create a new file</code>创建文件<br><img src="https://img-blog.csdnimg.cn/2020041417025843.png?x-oss-process=image/watermark,type_ZmFuZ3poZW5naGVpdGk,shadow_10,text_aHR0cHM6Ly9ibG9nLmNzZG4ubmV0L3FxXzQ1MTE2MDA5,size_16,color_FFFFFF,t_70#pic_center" alt="创建新文件"></li><li>文件名为index.html，然后点击<code>commit new file</code>提交<br><img src="https://img-blog.csdnimg.cn/20200414170645710.png?x-oss-process=image/watermark,type_ZmFuZ3poZW5naGVpdGk,shadow_10,text_aHR0cHM6Ly9ibG9nLmNzZG4ubmV0L3FxXzQ1MTE2MDA5,size_16,color_FFFFFF,t_70#pic_center" alt="创建index.html"><br>然后就可以使用username.github.io访问你的主页了<h3 id="4-绑定域名"><a href="#4-绑定域名" class="headerlink" title="4.绑定域名"></a>4.绑定域名</h3></li><li>域名可以在阿里云、腾讯云购买，没有的也可以跳过这一步</li><li>绑定域名参考<a href="https://auligey.github.io" target="_blank" rel="noopener">Github pages 绑定个人域名</a></li></ul>]]></content>
      
      
      <categories>
          
          <category> 搭建博客 </category>
          
      </categories>
      
      
        <tags>
            
            <tag> github </tag>
            
        </tags>
      
    </entry>
    
    
    
    <entry>
      <title>第一个Markdown文档——Hello.md</title>
      <link href="/2020/04/13/%E7%AC%AC%E4%B8%80%E4%B8%AAMarkdown%E6%96%87%E6%A1%A3/"/>
      <url>/2020/04/13/%E7%AC%AC%E4%B8%80%E4%B8%AAMarkdown%E6%96%87%E6%A1%A3/</url>
      
        <content type="html"><![CDATA[<p>打开你熟悉的文本编辑器（如 <a href="https://notepad-plus-plus.org/" target="_blank" rel="noopener">notepad++</a>），新建一个 ‘hello.md’ 文件，写入下面的内容，并保存：</p><pre><code class="c"># Hello World**This is my first time to use Markdown***第一次用文本编辑器写Markdown文档*~~这只是万里长征第一步~~ 但是，万事开头难 有了第一步，坚持下去，定有收获！</code></pre><p>‘.md’ 和 ‘.markdown’ 都是被普遍支持的扩展名，不过 ‘.md’ 更加简单和方便。</p><p>他转换成html文档后，应该是这样子：</p><h1 id="Hello-World"><a href="#Hello-World" class="headerlink" title="Hello World"></a>Hello World</h1><p><strong>This is my first time to use Markdown</strong><br><em>第一次用文本编辑器写Markdown文档</em><br><del>这只是万里长征第一步</del><br>但是，万事开头难 有了第一步，坚持下去，定有收获！</p>]]></content>
      
      
      <categories>
          
          <category> Markdown </category>
          
      </categories>
      
      
        <tags>
            
            <tag> Markdown </tag>
            
        </tags>
      
    </entry>
    
    
    
    <entry>
      <title>关于Markdown</title>
      <link href="/2020/04/13/%E5%85%B3%E4%BA%8EMarkdown/"/>
      <url>/2020/04/13/%E5%85%B3%E4%BA%8EMarkdown/</url>
      
        <content type="html"><![CDATA[<h2 id="介绍"><a href="#介绍" class="headerlink" title="介绍"></a>介绍</h2><p><a href="https://zh.wikipedia.org/wiki/Markdown" target="_blank" rel="noopener">维基百科: Markdown</a></p><blockquote><p>Markdown 是一种轻量级标记语言，创始人为约翰·格鲁伯（John<br>Gruber）。它允许人们“使用易读易写的纯文本格式编写文档，然后转换成有效的 XHTML（或者<br>HTML）文档”。这种语言吸收了很多在电子邮件中已有的纯文本标记的特性。</p></blockquote><hr><h2 id="为什么选择-Markdown"><a href="#为什么选择-Markdown" class="headerlink" title="为什么选择 Markdown"></a>为什么选择 Markdown</h2><ul><li>它基于纯文本，方便修改和共享；</li><li>几乎可以在所有的文本编辑器中编写；</li><li>有众多编程语言的实现和应用的相关扩展；</li><li>在 GitHub 等网站中有很好的应用；</li><li>很容易转换为 HTML 文档或其他格式；</li><li>适合用来编写文档、记录笔记、撰写文章。</li></ul><hr><h2 id="兼容-HTML"><a href="#兼容-HTML" class="headerlink" title="兼容 HTML"></a>兼容 HTML</h2><p>Markdown 完全兼容 HTML 语法，可以直接在 Markdown 文档中插入 HTML 内容：</p><pre><code class="html">&lt;table&gt;  &lt;tr&gt;    &lt;td&gt;1行1列&lt;/td&gt;    &lt;td&gt;1行2列&lt;/td&gt;  &lt;/tr&gt;  &lt;tr&gt;    &lt;td&gt;2行1列&lt;/td&gt;    &lt;td&gt;2行2列&lt;/td&gt;  &lt;/tr&gt;&lt;/table&gt;</code></pre><p>这段代码会变成下面的样子：</p><table>  <tr>    <td>1行1列</td>    <td>1行2列</td>  </tr>  <tr>    <td>2行1列</td>    <td>2行2列</td>  </tr></table>]]></content>
      
      
      <categories>
          
          <category> Markdown </category>
          
      </categories>
      
      
        <tags>
            
            <tag> Markdown </tag>
            
        </tags>
      
    </entry>
    
    
    
    <entry>
      <title>3-hexo配置首页</title>
      <link href="/2020/04/13/3-hexo%E9%85%8D%E7%BD%AE%E9%A6%96%E9%A1%B5/"/>
      <url>/2020/04/13/3-hexo%E9%85%8D%E7%BD%AE%E9%A6%96%E9%A1%B5/</url>
      
        <content type="html"><![CDATA[<h3 id="首页文件位置-layout-indexs-md"><a href="#首页文件位置-layout-indexs-md" class="headerlink" title="首页文件位置/layout/indexs.md"></a>首页文件位置/layout/indexs.md</h3><p>既然是md格式，大家应该都已经熟悉了，这里就不再赘述了~</p><h3 id="添加文章数和字数统计"><a href="#添加文章数和字数统计" class="headerlink" title="添加文章数和字数统计"></a>添加文章数和字数统计</h3><ul><li>加入含有 class=”article_number”的html标签可显示文章数量。</li><li>加入含有 class=”site_word_count”的html标签可显示站点总字数。</li></ul><pre><code class="bash">&lt;!-- 这里是借用了code的样式，所以直接使用code标签。    自定义样式，可加入style属性设置--&gt;&lt;code class=&quot;article_number&quot;&gt;&lt;/code&gt;&lt;code class=&quot;site_word_count&quot;&gt;&lt;/code&gt;</code></pre><p><strong>上面代码的效果：</strong><br>文章共<code class="article_number"></code>篇；总字数<code class="site_word_count"></code>字；</p>]]></content>
      
      
      <categories>
          
          <category> Hexo </category>
          
      </categories>
      
      
        <tags>
            
            <tag> Hexo </tag>
            
        </tags>
      
    </entry>
    
    
    
    <entry>
      <title>CentOS 7 wget 正在连接 127.0.0.1:8118... 失败：拒绝连接。</title>
      <link href="/2020/04/12/wget%E6%8B%92%E7%BB%9D%E8%BF%9E%E6%8E%A5/"/>
      <url>/2020/04/12/wget%E6%8B%92%E7%BB%9D%E8%BF%9E%E6%8E%A5/</url>
      
        <content type="html"><![CDATA[<p><strong>正在使用wget下载包的时候，出现了拒绝连接的错误</strong></p><pre><code class="bash">[root@CentOS7 local]# wget http://jaist.dl.sourceforge.net/project/pcre/pcre/8.33/pcre-8.33.tar.gz--2020-04-11 23:46:24--  http://jaist.dl.sourceforge.net/project/pcre/pcre/8.33/pcre-8.33.tar.gz正在连接 127.0.0.1:8118... 失败：拒绝连接。</code></pre><p><strong>查找问题的方法如下：</strong></p><h3 id="1-查看本地端口是否被占用"><a href="#1-查看本地端口是否被占用" class="headerlink" title="1.查看本地端口是否被占用"></a>1.查看本地端口是否被占用</h3><pre><code class="bash">[root@CentOS7 local]# netstat -ntplActive Internet connections (only servers)Proto Recv-Q Send-Q Local Address           Foreign Address         State       PID/Program name    tcp        0      0 127.0.0.1:631           0.0.0.0:*               LISTEN      1151/cupsd          tcp        0      0 127.0.0.1:25            0.0.0.0:*               LISTEN      1480/master         tcp        0      0 0.0.0.0:111             0.0.0.0:*               LISTEN      1/systemd           tcp        0      0 192.168.122.1:53        0.0.0.0:*               LISTEN      1612/dnsmasq        tcp        0      0 0.0.0.0:22              0.0.0.0:*               LISTEN      1150/sshd           tcp6       0      0 ::1:631                 :::*                    LISTEN      1151/cupsd          tcp6       0      0 ::1:25                  :::*                    LISTEN      1480/master         tcp6       0      0 :::111                  :::*                    LISTEN      1/systemd           tcp6       0      0 :::22                   :::*                    LISTEN      1150/sshd           </code></pre><p>本地端口8118并没有被占用</p><h3 id="2-查看本地网络代理"><a href="#2-查看本地网络代理" class="headerlink" title="2.查看本地网络代理"></a>2.查看本地网络代理</h3><pre><code class="bash">[root@CentOS7 local]# export | grep -i proxydeclare -x ftp_proxy=&quot;http://127.0.0.1:8118&quot;declare -x http_proxy=&quot;http://127.0.0.1:8118&quot;declare -x https_proxy=&quot;http://127.0.0.1:8118&quot;</code></pre><p>网络http确实有代理，几乎可以断定是这个代理引发的错误。</p><p><strong>解决办法：</strong><br>尝试关闭代理，然后重新使用wget下载</p><pre><code class="bash">[root@CentOS7 local]# unset http_proxy [root@CentOS7 local]# wget http://jaist.dl.sourceforge.net/project/pcre/pcre/8.33/pcre-8.33.tar.gz--2020-04-11 23:48:38--  http://jaist.dl.sourceforge.net/project/pcre/pcre/8.33/pcre-8.33.tar.gz正在解析主机 jaist.dl.sourceforge.net (jaist.dl.sourceforge.net)... 150.65.7.130, 2001:df0:2ed:feed::feed正在连接 jaist.dl.sourceforge.net (jaist.dl.sourceforge.net)|150.65.7.130|:80... 已连接。</code></pre><p><strong>wget连接成功！</strong></p>]]></content>
      
      
      <categories>
          
          <category> Linux </category>
          
      </categories>
      
      
        <tags>
            
            <tag> Linux </tag>
            
            <tag> CentOS </tag>
            
        </tags>
      
    </entry>
    
    
    
    <entry>
      <title>CentOS 7 添加一个简单的系统调用（内核编译法）</title>
      <link href="/2020/04/07/CentOS7%E6%B7%BB%E5%8A%A0%E7%AE%80%E5%8D%95%E7%9A%84%E7%B3%BB%E7%BB%9F%E8%B0%83%E7%94%A8_%E5%86%85%E6%A0%B8%E7%BC%96%E8%AF%91%E6%B3%95/"/>
      <url>/2020/04/07/CentOS7%E6%B7%BB%E5%8A%A0%E7%AE%80%E5%8D%95%E7%9A%84%E7%B3%BB%E7%BB%9F%E8%B0%83%E7%94%A8_%E5%86%85%E6%A0%B8%E7%BC%96%E8%AF%91%E6%B3%95/</url>
      
        <content type="html"><![CDATA[<hr><h1 id="一、实验目的"><a href="#一、实验目的" class="headerlink" title="一、实验目的"></a>一、实验目的</h1><ol><li>学习Linux的内核的系统调用。</li><li>理解、掌握Linux系统调用的实现框架、用户界面、参数传递、进入/返回过程。</li></ol><h1 id="二、实验内容"><a href="#二、实验内容" class="headerlink" title="二、实验内容"></a>二、实验内容</h1><p>在系统调用中添加一个不用传递参数的系统调用，实现一个简单的系统调用的添加。执行这个系统调用，在屏幕上显示输出“Hello World! ”。</p><hr><h1 id="三、实验环境"><a href="#三、实验环境" class="headerlink" title="三、实验环境"></a>三、实验环境</h1><p>虚拟机软件：Vmware Workstation<br>Linux发行版：CentOS 7  内置内核：linux 3.10.0<br>待编译内核：linux 4.15.10</p><hr><h1 id="四、操作方法和步骤"><a href="#四、操作方法和步骤" class="headerlink" title="四、操作方法和步骤"></a>四、操作方法和步骤</h1><h2 id="（1）下载软件包，并解压"><a href="#（1）下载软件包，并解压" class="headerlink" title="（1）下载软件包，并解压"></a>（1）下载软件包，并解压</h2><p>1.下载地址：<a href="http://ftp.sjtu.edu.cn/sites/ftp.kernel.org/pub/linux/kernel/v4.x/" target="_blank" rel="noopener">http://ftp.sjtu.edu.cn/sites/ftp.kernel.org/pub/linux/kernel/v4.x/</a><br>可以通过<code>Ctrl+F</code>快速查找<br>2.使用<code>tar</code>命令解压文件到/usr/src目录下。执行命令：</p><pre><code class="bash">tar xf ~/Downloads/linux-4.15.10.tar.gz -C /usr/src</code></pre><p>3.解压之后，切换工作目录到<code>/usr/src/linux-4.15.10/</code>，可以是用<code>Tab</code>键补全路径。执行命令：</p><pre><code class="bash">cd /usr/src/linux-4.15.10/</code></pre><p>4.后面操作大部分都需要root权限，使用<code>su</code>命令切换用户，输入密码时不会显示。执行命令：</p><pre><code class="bash">su root</code></pre><h2 id="（2）修改源程序，增加系统调用"><a href="#（2）修改源程序，增加系统调用" class="headerlink" title="（2）修改源程序，增加系统调用"></a>（2）修改源程序，增加系统调用</h2><p><strong>小提示：</strong> 在vim编辑器里，<code>i</code>字母插入，按<code>esc</code>后输入<code>:wq</code>保存并退出，<code>:q!</code>强制退出</p><p>1.使用vim编辑<code>arch/x86/entry/syscalls/syscall_64.tbl</code>文件，添加系统调用号，在普通模式下，<code>shift+g</code>或者<code>G</code>可以直接定位到文尾。执行命令：</p><pre><code class="bash">vim arch/x86/entry/syscalls/syscall_64.tbl</code></pre><p>添加两个没有使用(unuse)的系统调用号，其他格式可以参考文件中的其他系统调用，这里我添加了两个系统调用。代码如下：<br><img src="https://img-blog.csdnimg.cn/20200406232920550.png?x-oss-process=image/watermark,type_ZmFuZ3poZW5naGVpdGk,shadow_10,text_aHR0cHM6Ly9ibG9nLmNzZG4ubmV0L3FxXzQ1MTE2MDA5,size_16,color_FFFFFF,t_70" alt="添加系统调用号">2.使用vim编辑<code>include/linux/syscalls.h</code>文件，添加原型声明。执行命令：</p><pre><code class="bash">vim include/linux/syscalls.h</code></pre><p>不传递参数的时候，void也不能漏写。代码如下：<br><img src="https://img-blog.csdnimg.cn/20200406233121458.png?x-oss-process=image/watermark,type_ZmFuZ3poZW5naGVpdGk,shadow_10,text_aHR0cHM6Ly9ibG9nLmNzZG4ubmV0L3FxXzQ1MTE2MDA5,size_16,color_FFFFFF,t_70" alt="添加原型声明"><br>3.使用vim编辑<code>kernel/sys.c</code>文件，实现具体的系统调用。执行命令：</p><pre><code class="bash">vim kernel/sys.c</code></pre><p>代码打一遍印象深刻一些，GoGoGo！代码如下：<br><img src="https://img-blog.csdnimg.cn/20200406233418258.png?x-oss-process=image/watermark,type_ZmFuZ3poZW5naGVpdGk,shadow_10,text_aHR0cHM6Ly9ibG9nLmNzZG4ubmV0L3FxXzQ1MTE2MDA5,size_16,color_FFFFFF,t_70" alt="系统调用的实现"></p><hr><h2 id="（3）编译内核"><a href="#（3）编译内核" class="headerlink" title="（3）编译内核"></a>（3）编译内核</h2><p>这里就不详细说明了，请参考<a href="https://auligey.github.io/2020/04/05/CentOS7%E7%BC%96%E8%AF%91%E5%86%85%E6%A0%B8/" target="_blank" rel="noopener">Linux发行版 CentOS编译内核</a></p><hr><h2 id="（4）测试系统调用"><a href="#（4）测试系统调用" class="headerlink" title="（4）测试系统调用"></a>（4）测试系统调用</h2><p>1.使用vim命令创建测试文件<code>mysyscall.c</code>和<code>mycall.c</code>，下面以mysyscall.c的创建和测试为例。执行命令：</p><pre><code class="bash">vim mysyscall.c</code></pre><p><img src="https://img-blog.csdnimg.cn/20200406233820378.png?x-oss-process=image/watermark,type_ZmFuZ3poZW5naGVpdGk,shadow_10,text_aHR0cHM6Ly9ibG9nLmNzZG4ubmV0L3FxXzQ1MTE2MDA5,size_16,color_FFFFFF,t_70" alt="测试mysyscall"><br>2.使用gcc编译c程序文件<br><em>编译的四个阶段</em></p><ul><li>-E：仅执行编译预处理</li><li>-c：仅执行编译操作，不进行连接操作</li><li>-S：将C代码转换为汇编代码</li><li>-o：指定生成的输出文件</li></ul><p>直接使用<code>gcc -o</code>生成指定输出文件。执行命令：</p><pre><code class="bash">gcc -o mysyscall_test mysyscall_test.c   #使用gcc编译</code></pre><p>运行可执行文件，执行命令：</p><pre><code class="bash">./mysyscall_test        # 运行可执行文件</code></pre><p><img src="https://img-blog.csdnimg.cn/20200406234708504.png" alt="gcc编译测试文件并执行"><br>使用<code>dmesg</code>查看printk的输出情况。执行命令：</p><pre><code class="bash">dmesg</code></pre><p><img src="https://img-blog.csdnimg.cn/2020040623462720.png?x-oss-process=image/watermark,type_ZmFuZ3poZW5naGVpdGk,shadow_10,text_aHR0cHM6Ly9ibG9nLmNzZG4ubmV0L3FxXzQ1MTE2MDA5,size_16,color_FFFFFF,t_70" alt="dmesg输出情况"><br>系统调用的<strong>返回值</strong>和<strong>printk的输出</strong>均符合预期，系统调用成功添加了！</p><hr><h1 id="五、总结"><a href="#五、总结" class="headerlink" title="五、总结"></a>五、总结</h1><ul><li>两个字高度概括，<strong>简单！</strong></li><li>剩下的你们自己慢慢写吧，有问题欢迎在留言区交流，谢谢观看。</li></ul>]]></content>
      
      
      <categories>
          
          <category> Linux </category>
          
      </categories>
      
      
        <tags>
            
            <tag> Linux </tag>
            
            <tag> CentOS </tag>
            
        </tags>
      
    </entry>
    
    
    
    <entry>
      <title>CentOS 7 编译内核</title>
      <link href="/2020/04/05/CentOS7%E7%BC%96%E8%AF%91%E5%86%85%E6%A0%B8/"/>
      <url>/2020/04/05/CentOS7%E7%BC%96%E8%AF%91%E5%86%85%E6%A0%B8/</url>
      
        <content type="html"><![CDATA[<hr><h1 id="一、实验目的"><a href="#一、实验目的" class="headerlink" title="一、实验目的"></a>一、实验目的</h1><ol><li>学习怎样重新编译Linux内核。</li><li>理解、掌握Linux标准内核和发行版本内核的区别。</li></ol><hr><h1 id="二、环境准备"><a href="#二、环境准备" class="headerlink" title="二、环境准备"></a>二、环境准备</h1><p>虚拟机软件：Vmware Workstation<br>Linux发行版：CentOS 7  内置内核：linux 3.10.0<br>待编译内核：linux 4.15.10</p><hr><h1 id="三、操作方法和步骤"><a href="#三、操作方法和步骤" class="headerlink" title="三、操作方法和步骤"></a>三、操作方法和步骤</h1><ul><li>编译过程很多地方需要root权限，为了方便，直接切换到root，切换命令：<pre><code class="bash">su root</code></pre></li><li><strong>小提示</strong>：输入密码时不会显示，<code>$</code>表示一般用户，<code>#</code>表示超级管理员root，<code>Tab</code>键可以补全路径</li></ul><h2 id="（1）下载内核并解压"><a href="#（1）下载内核并解压" class="headerlink" title="（1）下载内核并解压"></a>（1）下载内核并解压</h2><ol><li>使用浏览器打开<a href="http://ftp.sjtu.edu.cn/sites/ftp.kernel.org/pub/linux/kernel/v4.x/" target="_blank" rel="noopener">http://ftp.sjtu.edu.cn/sites/ftp.kernel.org/pub/linux/kernel/v4.x/</a></li><li><code>Ctrl+F</code>查找linux-4.15.10.tar.gz，点击即可下载，我下载的位置是<code>/home/username/Downloads/linux-4.15.10.tar.gz</code></li><li>使用<code>tar</code>命令解压文件：<pre><code class="c">tar xf ~/Downloads/linux-4.15.10.tar.gz -C /usr/src</code></pre></li><li>解压之后，切换工作目录：<pre><code class="bash">cd /usr/src/linux-4.15.10/</code></pre></li></ol><h2 id="（2）配置项"><a href="#（2）配置项" class="headerlink" title="（2）配置项"></a>（2）配置项</h2><p><strong>配置项的几种方式</strong></p><ul><li><code>make config</code>         基于文本的配置界面</li><li><code>make menuconfig</code>    基于文本菜单的配置界面</li><li><code>make xconfig</code>        基于图像窗口的配置界面</li><li><code>make oldconfig</code>        基于原来内核配置基础上修改</li></ul><p><strong>本文采用基于文本菜单的配置界面（make menuconfig）</strong></p><ul><li>使用<code>make menuconfig</code>需要<code>ncurses-devel</code>的支持</li><li>安装<code>ncurses-devel</code>命令：<pre><code class="bash">yum install ncurses-devel</code></pre></li><li>执行<code>make menuconfig</code>，开始选择配置项（<strong>注意终端窗口至少为19行，80列，否则报错提示</strong>）<pre><code class="bash">make menuconfig</code></pre></li><li>成功执行后，会出现下面的窗口：<br><img src="https://img-blog.csdnimg.cn/20200405135307329.png?x-oss-process=image/watermark,type_ZmFuZ3poZW5naGVpdGk,shadow_10,text_aHR0cHM6Ly9ibG9nLmNzZG4ubmV0L3FxXzQ1MTE2MDA5,size_16,color_FFFFFF,t_70#pic_center" alt="menuconfig"></li><li>直接<strong>保存退出</strong>就可以了，它会使用 CentOS 内部的配置文件作为这次编译的配置文件</li></ul><h2 id="（3）编译内核"><a href="#（3）编译内核" class="headerlink" title="（3）编译内核"></a>（3）编译内核</h2><ul><li>编译需要<code>elfutils-libelf-devel</code> 和 <code>openssl-devel</code> 的支持，安装命令：<pre><code class="bash">yum install elfutils-libelf-devel openssl-devel</code></pre></li><li>使用<code>make</code>命令开始编译内核，可以使用多核线程提高编译速度：<pre><code class="bash">make -j4</code></pre></li></ul><p><strong>emmm，编译时间很长(1小时左右，与电脑性能有关)，耐心等待</strong></p><h2 id="（4）安装"><a href="#（4）安装" class="headerlink" title="（4）安装"></a>（4）安装</h2><ul><li>漫长的等待之后，终于迎来了安装内核</li><li>执行 <code>make modules_install</code> 开始安装模块：<pre><code class="bash">make modules_install</code></pre></li><li>等待几分钟，执行<code>make install</code> 开始安装核心：<pre><code class="bash">make install</code></pre></li><li>顺利安装完成，重启虚拟机看看</li></ul><h2 id="（5）重启虚拟机"><a href="#（5）重启虚拟机" class="headerlink" title="（5）重启虚拟机"></a>（5）重启虚拟机</h2><ul><li><p>重启之后，进入grub界面，选择新编译的内核：<code>CentOS Linux （4.15.10）</code></p></li><li><p>进入桌面后，打开终端，使用<code>uname -a</code>查看内核版本：</p><pre><code class="bash">uname -sr</code></pre></li><li><p>实验做完了，才算完成了一半，<strong>还有实验报告没写！haha</strong></p></li></ul><hr><h1 id="四、欠揍式总结（👊警告）"><a href="#四、欠揍式总结（👊警告）" class="headerlink" title="四、欠揍式总结（👊警告）"></a>四、欠揍式总结（👊警告）</h1><ul><li><strong>有啥总结的！不是一番风顺吗？</strong></li><li><strong>Go！ 篮球场约起！</strong></li></ul>]]></content>
      
      
      <categories>
          
          <category> Linux </category>
          
      </categories>
      
      
        <tags>
            
            <tag> Linux </tag>
            
            <tag> CentOS </tag>
            
            <tag> 操作系统课程实践 </tag>
            
        </tags>
      
    </entry>
    
    
    
    <entry>
      <title>3-hexo快捷键说明</title>
      <link href="/2020/04/05/3-hexo%E5%BF%AB%E6%8D%B7%E9%94%AE%E8%AF%B4%E6%98%8E/"/>
      <url>/2020/04/05/3-hexo%E5%BF%AB%E6%8D%B7%E9%94%AE%E8%AF%B4%E6%98%8E/</url>
      
        <content type="html"><![CDATA[<p>快捷键为vim风格的，按键可能与vimium（chrome插件）的快捷键有冲突，插件设置屏蔽掉此站的快捷键即可。</p><h2 id="说明"><a href="#说明" class="headerlink" title="说明"></a>说明</h2><h4 id="搜索框"><a href="#搜索框" class="headerlink" title="搜索框"></a>搜索框</h4>]]></content>
      
      
      <categories>
          
          <category> Hexo </category>
          
      </categories>
      
      
        <tags>
            
            <tag> Hexo </tag>
            
            <tag> 快捷键 </tag>
            
        </tags>
      
    </entry>
    
    
    
    <entry>
      <title>hexo安装教程</title>
      <link href="/2020/04/04/hexo%E5%AE%89%E8%A3%85%E6%95%99%E7%A8%8B/"/>
      <url>/2020/04/04/hexo%E5%AE%89%E8%A3%85%E6%95%99%E7%A8%8B/</url>
      
        <content type="html"><![CDATA[<hr><h1 id="安装前提"><a href="#安装前提" class="headerlink" title="安装前提"></a>安装前提</h1><p>安装hexo之前，需要安装下列应用程序：</p><ul><li><a href="http://nodejs.org/" target="_blank" rel="noopener">Node.js</a></li><li><a href="http://git-scm.com/" target="_blank" rel="noopener">Git</a></li></ul><hr><h2 id="安装-Git"><a href="#安装-Git" class="headerlink" title="安装 Git"></a>安装 Git</h2><ul><li>Windows：下载并安装 <a href="http://git-scm.com/" target="_blank" rel="noopener">Git(官网)</a>或者<a href="https://npm.taobao.org/mirrors/git-for-windows/" target="_blank" rel="noopener">淘宝 Git for Windows 镜像</a>，安装选项全部默认，在最后一步添加路径时选择<code>Use Git from the Windows Command Prompt</code>，这样我们就可以直接在命令提示符里打开Git了</li><li>Mac：使用 <a href="http://mxcl.github.com/homebrew/" target="_blank" rel="noopener">Homebrew</a>, <a href="http://mxcl.github.com/homebrew/" target="_blank" rel="noopener">MacPorts</a> 或者下载<a href="http://sourceforge.net/projects/git-osx-installer/" target="_blank" rel="noopener">安装程序</a>。</li><li>Linux (Ubuntu, Debian)：<pre><code class="c">sudo apt-get install git-core</code></pre></li><li>Linux (Fedora, Red Hat, CentOS)：<pre><code class="c">sudo yum install git-core</code></pre>安装完成后，在bash中输入<code>git --version</code>验证是否安装成功。</li></ul><hr><h2 id="安装-Node-js"><a href="#安装-Node-js" class="headerlink" title="安装 Node.js"></a>安装 Node.js</h2><ul><li>Node.js 为大多数平台提供了官方的<a href="https://nodejs.org/en/download/" target="_blank" rel="noopener">安装程序</a>。对于中国大陆地区用户，可以前往<a href="https://npm.taobao.org/mirrors/node" target="_blank" rel="noopener">淘宝 Node.js 镜像</a>下载。</li><li>安装完成后，在bash中输入<code>node -v</code>验证是否安装成功。</li></ul><hr><h1 id="安装-Hexo"><a href="#安装-Hexo" class="headerlink" title="安装 Hexo"></a>安装 Hexo</h1><ul><li>安装必备应用程序后，即可使用<code>npm</code>（你配吗hahaha开个玩笑）来安装hexo<pre><code class="bash">$ npm install -g hexo-cli</code></pre></li></ul><hr><h1 id="进阶使用-hexo"><a href="#进阶使用-hexo" class="headerlink" title="进阶使用 hexo"></a>进阶使用 hexo</h1><p>安装后，可以使用两种方式执行hexo：</p><ul><li><code>npx hexo &lt;命令&gt;</code></li><li>将 hexo 所在的目录下的 <code>node_modules</code> 添加到环境变量之中即可直接使用 <code>hexo &lt;命令&gt;</code>：<pre><code class="bash">echo &#39;PATH=&quot;$PATH:./node_modules/.bin&quot;&#39; &gt;&gt; ~/.profile</code></pre></li></ul><h1 id="hexo真香！"><a href="#hexo真香！" class="headerlink" title="hexo真香！"></a>hexo真香！</h1>]]></content>
      
      
      <categories>
          
          <category> Hexo </category>
          
      </categories>
      
      
        <tags>
            
            <tag> Hexo </tag>
            
        </tags>
      
    </entry>
    
    
    
    <entry>
      <title>白嫖系列——xmind 8</title>
      <link href="/2020/04/04/%E7%99%BD%E5%AB%96%E7%B3%BB%E5%88%97%E2%80%94%E2%80%94xmind%208/"/>
      <url>/2020/04/04/%E7%99%BD%E5%AB%96%E7%B3%BB%E5%88%97%E2%80%94%E2%80%94xmind%208/</url>
      
        <content type="html"><![CDATA[<h1 id="如何优雅的白嫖xmind-8-？"><a href="#如何优雅的白嫖xmind-8-？" class="headerlink" title="如何优雅的白嫖xmind 8 ？"></a>如何优雅的白嫖xmind 8 ？</h1><blockquote><p>仅供学习交流使用，请支持正版，谢谢合作（白嫖，它不香么？）</p></blockquote><h1 id="1-在官网下载xmind最新的版本，安装软件"><a href="#1-在官网下载xmind最新的版本，安装软件" class="headerlink" title="1.在官网下载xmind最新的版本，安装软件"></a>1.在官网下载xmind最新的版本，安装软件</h1><p>官网地址：<a href="https://www.xmind.cn/download/xmind8" target="_blank" rel="noopener">https://www.xmind.cn/download/xmind8</a><br>本文用的是XMind 8 Update 9</p><h1 id="2-下载软件包"><a href="#2-下载软件包" class="headerlink" title="2.下载软件包"></a>2.下载软件包</h1><p>链接：<a href="https://pan.baidu.com/s/1TdcEU6RYYvAmpoMkpBj8MA" target="_blank" rel="noopener">https://pan.baidu.com/s/1TdcEU6RYYvAmpoMkpBj8MA</a><br>提取码：<code>3nbc</code> </p><h1 id="3-找到安装目录"><a href="#3-找到安装目录" class="headerlink" title="3. 找到安装目录"></a>3. 找到安装目录</h1><p>本文的是：<code>D:\Program Files (x86)\XMind</code><br>如果找不到，可以通过鼠标右键xmind图标–&gt;打开文件所在位置<br><img src="/img/%E6%9F%A5%E6%89%BExmind%E5%AE%89%E8%A3%85%E4%BD%8D%E7%BD%AE.png" alt="查找xmind安装位置"></p><h1 id="4-打开我分享的文件"><a href="#4-打开我分享的文件" class="headerlink" title="4.打开我分享的文件"></a>4.打开我分享的文件</h1><p><img src="/img/%E6%9F%A5%E6%89%BExmind%E7%A0%B4%E8%A7%A3%E6%96%87%E4%BB%B6.png" alt="查找xmind破解文件"><br>找到这个<code>.jar</code>的文件，复制到xmind的安装目录（第3步中的安装路径）</p><h1 id="5-修改xmind配置文件-xmind-ini"><a href="#5-修改xmind配置文件-xmind-ini" class="headerlink" title="5.修改xmind配置文件(xmind.ini)"></a>5.修改xmind配置文件(xmind.ini)</h1><p> 在安装目录下，找到xmind.ini文件，用记事本打开<br> 在最后<strong>添加一句代码</strong></p><pre><code class="bash">-javaagent:D:\Program Files(x86)\XMind\XMindCrack.jar</code></pre><p>并<strong>保存文件</strong><br><strong>注意：</strong> <code>-javaagent:</code>后面为<code>XMindCrack.jar</code>文件的路径，<strong>冒号要使用英文</strong></p><h1 id="6-打开安装后的xmind"><a href="#6-打开安装后的xmind" class="headerlink" title="6.打开安装后的xmind"></a>6.打开安装后的xmind</h1><p>在<strong>菜单栏</strong>找到 “帮助” –&gt; “序列号”，填写<strong>邮箱</strong>和<strong>序列号</strong><br>邮箱随便填写一个正确的格式，也可以填写你自己的邮箱<br>打开我分享的文件<code>xmind激活序列号.txt</code>，复制粘贴上去<br><img src="/img/%E8%8E%B7%E5%8F%96xmind%E6%BF%80%E6%B4%BB%E5%BA%8F%E5%88%97%E5%8F%B7.png" alt="获取xmind激活序列号"></p><p><strong>激活成功<br>放肆的使用吧！</strong></p><p><strong>PS：</strong></p><p>仅供学习交流使用，任何人不得以商业盈利为目的，否则一切责任自己承担！</p>]]></content>
      
      
      <categories>
          
          <category> 白嫖系列 </category>
          
      </categories>
      
      
        <tags>
            
            <tag> 工具 </tag>
            
            <tag> 白嫖 </tag>
            
        </tags>
      
    </entry>
    
    
  
  
</search>
